As the author of DVWA, I'd like to explain a little about the project...

DVWA is an acronym for Damn VULNERABLE Web App. If you aren't a native English speaker, Damn is a slang term for very. Web App defines the project as an application which runs on a web server and is commonly viewed through a browser. It is the VULNERABLE part that is important here. The definition of VULNERABLE in the Oxford English Dictionary is as follows:

> exposed to the possibility of being attacked or harmed, either physically or emotionally.

Meaning, the project is designed to have issues, it is a training application for people to learn about web security by exploiting vulnerabilities. The fact that you've only found one means you obviously aren't working very hard as there are literally tens of vulnerabilities, if not more.

Please, put some effort into the research you are doing so you don't make a fool of yourself by creating bogus reports like this one.

* https://twitter.com/LiveOverflow/status/1692082869852615157?s=20
* https://twitter.com/dr0idAndy/status/1691897379354538149?s=20


DVWA v1.0(https://github.com/digininja/DVWA) was discovered to contain a SQL injection vulnerability (CVE-2023-39848) via the id parameter at blind\source\high.php.
It may lead to a second-order SQL injection.

5.	 $id = $_COOKIE[ 'id' ];
6.	
7.	 // Check database
8.	 $getid  = "SELECT first_name, last_name FROM users WHERE user_id = '$id' LIMIT 1;";
9.	 $result = mysqli_query($GLOBALS["___mysqli_ston"],  $getid ); // Removed 


When a user stores malicious input in the cookie, the variable $id receives the value of $_COOKIE['id'] and is directly passed into the $query, 
resulting in the risk of data loss and unauthorized access. For example, if an attacker hijacked the cookie and stores a malicious value "12 or 1=1 #" in the cookie. 
Once the above code is triggered, the generated SQL statement becomes "SELECT first_name, last_name FROM users WHERE user_id = 12 or 1=1 # LIMIT 1", 
where # acts as a comment symbol, causing the subsequent statements to not be executed, and "or 1=1" becomes a constant true condition, leading to data leakage from the users table. 
