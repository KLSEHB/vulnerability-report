Doctormms v1.0 (https://www.sourcecodester.com/php/14182/doctor-appointment-system.html) is vulnerable to a second-order SQL Injection in the variable $userid at doctors\myDetails.php.

The code in doctors\myDetails.php.
  10.include('../config.php');
  11.$sql="SELECT * FROM doctor where userid='" . $_SESSION["userid"] . "'";
  12.
  13.$q=mysqli_query($conn,$sql);

  84.if(isset($_POST['submit'])){
  85.						
  86.
  87. $sql="UPDATE doctor SET name='" .$_POST["name"]. "' ,address='" .$_POST["address"]."' , contact='" .$_POST["contact"]. "',email='" .$_POST["email"]. "' ,pic='" .$_POST["pic"]. "' WHERE userid='" . $_SESSION["userid"] . "'";

Trigger: 
   The "userid" originates from "$_SESSION["userid"] = $_POST["userid"]" at doctors\doctorlogin.php. It is not a session variable controlled by the server and does not represent an auto-increment type number in the database. It's vulnerable.

At line 11 and 87 of the code, the $_SESSION["userid"] value is directly utilized within an SQL statement and from "$_SESSION["userid"] = $_POST["userid"]" at doctors\doctorlogin.php. Subsequently, a query is executed at line 25, leading to a potential database leak.
If an attacker stores a malicious value "12 or 1=1 #" in the $_POST["userid"], the executed SQL statement becomes 'SELECT * FROM doctor where userid=12 or 1=1 #'. This action can result in a significant data exposure, potentially affecting the entire booking dataset.
Similarly, if the attacker deposits '1'; system shutdown;#' into the session, the outcome remains concerning, triggering a database shutdown.

What's more, at line 87, "...name='" .$_POST["name"]. "' ,address='" .$_POST["address"]."' , contact='" .$_POST["contact"]. "',email='" .$_POST["email"]. "' ,pic='" .$_POST["pic"]. "', would also lead to SQL injections.


